import nltk
from nltk.corpus import movie_reviews
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from joblib import dump
import random
import matplotlib.pyplot as plt


# Download dataset
nltk.download('movie_reviews')



# Prepare data
print("Preparing data...")
documents = [(list(movie_reviews.words(fileid)), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]
random.shuffle(documents)

reviews = [" ".join(words) for (words, category) in documents]
labels = [category for (words, category) in documents]



# Split data
X_train, X_test, y_train, y_test = train_test_split(
    reviews, labels, test_size=0.2, random_state=42
)



# Vectorize text
print("Vectorizing text...")
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)



# Train model
print("Training model...")
model = LogisticRegression(max_iter=1000, random_state=42)
model.fit(X_train_tfidf, y_train)



# Evaluate
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)



# Save model
print("Saving model...")
dump({'model': model, 'vectorizer': vectorizer}, 'sentiment_model.joblib')
print("Model saved as 'sentiment_model.joblib'")



# Display sample predictions
print("\nSample Predictions:")
sample_indices = random.sample(range(len(X_test)), 3)
for idx in sample_indices:
    review = X_test[idx][:150] + "..." if len(X_test[idx]) > 150 else X_test[idx]
    prediction = "Positive" if model.predict(X_test_tfidf[idx])[0] == "pos" else "Negative"
    print(f'\nReview: "{review}"')
    print(f'Prediction: {prediction}')
    print(f'Accuracy on test set: {accuracy:.0%}\n')


# Create visualization
plt.figure(figsize=(6, 4))
plt.bar(['Accuracy'], [accuracy*100], color='lightgreen')
plt.ylim(0, 100)
plt.ylabel('Percentage (%)')
plt.title('Model Test Accuracy')
plt.text(0, accuracy*100+2, f'{accuracy:.0%}', ha='center', va='bottom')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
